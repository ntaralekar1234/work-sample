{"version":3,"sources":["constant/actionTypes.js","assets/images/logo.JPG","router/index.js","reducers/auth.js","reducers/index.js","store/index.js","store/localstorage.js","App.js","serviceWorker.js","index.js"],"names":["SET_LOGIN_FLAG","SET_USER_DATA","SET_USER_AUTHTOKEN","SET_ROUTE_NAME","SET_SEARCH_TEXT","SET_SEARCH_LOADER","module","exports","PanelHome","lazy","ManageUser","Home","About","Contact","Profile","AutoMessageList","ManagePackages","SubCategories","Router","props","state","this","loginFlag","fallback","className","style","height","src","logo_tr","alt","fontSize","exact","path","component","Component","connect","auth","dispatch","initial_state","loginUserData","authToken","routeName","searchText","searchLoader","reducers","combineReducers","action","type","loading","flag","userData","rootReducer","undefined","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","compose","applyMiddleware","thunkMiddleware","logger","window","devToolsExtension","f","subscribe","stringify","setItem","e","saveToLocalStorage","getState","App","basename","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.57c10130.chunk.js","sourcesContent":["//LOGIN AND COMMAN (auth)\nexport const SET_LOGIN_FLAG=\"SET_LOGIN_FLAG\";\nexport const SET_USER_DATA=\"SET_USER_DATA\";\nexport const SET_USER_AUTHTOKEN=\"SET_USER_AUTHTOKEN\";\nexport const SET_ROUTE_NAME=\"SET_ROUTE_NAME\";\nexport const SET_SEARCH_TEXT=\"SET_SEARCH_TEXT\";\nexport const SET_SEARCH_LOADER=\"SET_SEARCH_LOADER\";\n\n\n","module.exports = __webpack_public_path__ + \"static/media/logo.3682bb96.JPG\";","/* eslint-disable */\r\n\r\nimport React, { Component, Fragment, lazy, Suspense } from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport App from \"../components/app\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst PanelHome = lazy(() => import(\"../Pages/index\"));\r\nconst ManageUser = lazy(() => import(\"../Pages/ManageUsers/index\"));\r\nconst Home = lazy(() => import(\"../userPages/index\"));\r\nconst About = lazy(() => import(\"../userPages/about\"));\r\nconst Contact = lazy(() => import(\"../userPages/contact\"));\r\nconst Profile = lazy(() => import(\"../Pages/Profile/index\"));\r\nconst AutoMessageList = lazy(() => import(\"../Pages/AutoMessageList/index\"));\r\nconst ManagePackages = lazy(() => import(\"../Pages/ManagePackages/index\"));\r\nconst SubCategories = lazy(() => import(\"../Pages/SubCategories/index\"));\r\n\r\nimport logo_tr from \"../assets/images/logo.JPG\";\r\n\r\nclass Router extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const { loginFlag } = this.props;\r\n\r\n    return (\r\n      <Switch>\r\n        <Suspense fallback={<div\r\n\r\n          className=\"d-flex justify-content-center align-items-center flex-column\"\r\n\r\n          style={{ height: \"100vh\" }}\r\n\r\n        >\r\n\r\n          <img src={logo_tr} alt=\"Reportdesk logo\" height=\"100\" />\r\n\r\n          <span\r\n\r\n            className=\"pt-4 text-secondary\"\r\n\r\n            style={{ fontSize: \"14px\" }}\r\n\r\n          >\r\n\r\n            Loading...\r\n\r\n          </span>\r\n\r\n        </div>}>\r\n          <Route\r\n            exact\r\n            path={`/`}\r\n            component={Home}\r\n          />\r\n          <Route\r\n            exact\r\n            path={`/about`}\r\n            component={About}\r\n          />\r\n          <Route\r\n            exact\r\n            path={`/contact`}\r\n            component={Contact}\r\n          />\r\n          <Route\r\n            exact\r\n            path={`/home`}\r\n            component={PanelHome}\r\n          />\r\n          <Route\r\n            exact\r\n            path={`/manage-users`}\r\n            component={ManageUser}\r\n          />\r\n\r\n\r\n          <Route\r\n            exact\r\n            path={`/auto-message-list`}\r\n            component={AutoMessageList}\r\n          />\r\n\r\n          <Route\r\n            exact\r\n            path={`/manage-packages`}\r\n            component={ManagePackages}\r\n          />\r\n          <Route\r\n            exact\r\n            path={`/sub-categories`}\r\n            component={SubCategories}\r\n          />\r\n          <Route\r\n            exact\r\n            path={`/profile`}\r\n            component={Profile}\r\n          />\r\n        </Suspense>\r\n      </Switch>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  loginFlag: state.auth.loginFlag,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {};\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Router);\r\n","import { \n    SET_LOGIN_FLAG, \n    SET_USER_DATA, \n    SET_USER_AUTHTOKEN, \n    SET_ROUTE_NAME, \n    SET_SEARCH_TEXT, \n    SET_SEARCH_LOADER\n } from \"../constant/actionTypes\";\n\nconst initial_state = {\n    loginFlag : false,\n    loginUserData : null,\n    authToken : null,\n    routeName : null ,\n    searchText : null,\n    searchLoader : false\n};\n\nexport default (state = initial_state, action) => {\n    switch (action.type) {\n        \n        case SET_LOGIN_FLAG:\n            return { ...state, loading: false, loginFlag: action.flag };\n        \n        case SET_USER_DATA:\n            return { ...state, loading: false, loginUserData: action.userData };\n\n        case SET_USER_AUTHTOKEN:\n            return { ...state, loading: false, authToken: action.authToken };\n\n        case SET_ROUTE_NAME:\n            return { ...state, loading: false, routeName: action.routeName };\n\n        case SET_SEARCH_TEXT:\n            return { ...state, loading: false, searchText: action.searchText };\n\n        case SET_SEARCH_LOADER:\n            return { ...state, loading: false, searchLoader: action.searchLoader };\n\n        default: return { ...state };\n    }\n}\n","import { combineReducers } from 'redux';\nimport auth from './auth';\n\nconst reducers = combineReducers({\n    auth,\n});\n\nconst rootReducer = (state, action) => {\n    if (action.type === 'USER_LOGOUT') {\n        state = undefined;\n    }\n  \n    return reducers(state, action);\n};\n\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from 'redux';\n// middlewares\nimport thunkMiddleware from 'redux-thunk'\nimport logger from 'redux-logger'\n// import { loadState,saveState } from \"./localstorage\";\nimport { loadState } from \"./localstorage\";\n// Import custom components\nimport reducers from '../reducers/index';\n\n\nfunction saveToLocalStorage(state) {\n    try {\n        const serializedState = JSON.stringify(state)\n        localStorage.setItem('state', serializedState)\n    }catch(e){\n        return undefined\n    }\n}\n\n/**\n * Create a Redux store that holds the app state.\n */\nlet persistedState = loadState();\nconst store = createStore(reducers,  persistedState,  compose(\n    applyMiddleware(thunkMiddleware, logger),\n\n    //For working redux dev tools in chrome (https://github.com/zalmoxisus/redux-devtools-extension)\n    window.devToolsExtension ? window.devToolsExtension() : function (f) {\n        return f;\n    }\n));\n\n// eslint-disable-next-line\nconst unsubscribe = store.subscribe(() => {\n    const state = store.getState();\n    saveToLocalStorage(state);\n});\n\n\nexport default store;","\n\nexport const  loadState =() =>{\n\n    try{\n        const serializedState = localStorage.getItem('state');\n        if(serializedState){\n\n\n            var temp =  JSON.parse(serializedState);\n            \n            return temp\n\n        }\n        else{\n            return undefined;\n        }\n\n    }\n    catch(err){\n        return err;\n    }\n\n}\n\nexport const saveState = (state) =>{\n\n    try{\n       const serializedState = JSON.stringify(state);\n       localStorage.setItem('state',serializedState);\n    }\n    catch(err){\n       \n    }\n    \n}","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { ScrollContext } from 'react-router-scroll-4';\nimport Router from \"./router/index\";\n\n//css\nimport \"./assets/css/style.css\";\nimport \"./assets/css/responsive.css\";\nimport \"./assets/css/datatables.min.css\";\n\nimport \"./userAssets/css/styles.min.css\";\n\n// ** Import custom components for redux**\nimport { Provider } from 'react-redux';\nimport store from './store/index';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Provider store={store}>\n                <BrowserRouter basename={'/'}>\n                    <ScrollContext>\n                        <Router />\n                    </ScrollContext>\n                </BrowserRouter>\n            </Provider>\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}